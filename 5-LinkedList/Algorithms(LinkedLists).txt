FINDING MIDDLE NODE OF LINKED LISTS:
eg : 3rd element in case of n = 5
     4th element in case of n = 6 ans so on 
hence , the general tern is Middle Term = ((n/2) + 1)th term.
Naive approach  :
Calculating the length and then then traversing to ((n/2)+1)th term.
PesudoCode for approach :
temp = head;
cnt = 0;
while(temp!= NULL){
   cnt++;
   temp = temp->next;
}
MidNode = (cnt/n) + 1;
temp = head;
while(temp!=NULL){
  MidNode = MidNode - 1;
  if(MidNode == 0) break;
  temp = temp -> next;
}
reuturn temp :
T.C -> O(N+N/2)
S.C -> O(1)

Optimal Approach (Hare and tortoise approach):
create two pointers Slow and Fast , slow will jump one position and fast will jump 2 positions,
example :
1 2 3 4 5
s
f
1 2 3 4 5
  s f
1 2 3 4 5 
    s   f (Break when f reaches last element and return s as mid)
           **f reaches at the last element in case if odd elements
For even number of elements :
1 2 3 4 5 6 
s
f 
1 2 3 4 5 6
  s f
1 2 3 4 5 6
    s   f
1 2 3 4 5 6 
      s     f (f reaches null hence return s as the midpoint)
               **f reaches null in case of Even no of elements
Pseudocode :
slow = head;
fast = head;
while(fast!=NULL && fast->next!=NULL){
  slow = slow->next;
  fast = fast->next->next;
}
T.C = O(n/2)
S.C = O(1)
code :
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast!=NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};
----------------------------------------------------------------------------------------
REVERSE A LINKED LIST :
Naive way :
Traverse and insert values into stack and then push values out :
Pesudocode :
temp = head ;
stack st;
while(temp!=NULL){
  st.push(temp->data)
  temp = temp ->next
}
temp = head ;
while(temp != NULL){
  temp -> data  = st.top();
  st.pop();
  temp = temp ->next;
}
TC = O(2N)
SC = O(N)
Better Way :
reversing the links of Linked List.
----------------------------------------------------------------------------------------------------------
Detecting a loop in Linked Linked :
Naive approach : Hashing (remembering if we went through the point)
Store <node,int> , in hashmaps
map<Node* , int> mpp;
 temp = head;
 while(temp!=NULL){
    if(mpp.find(temp))
       return true;
    else
    mpp[temp] = 1;
 temp = temp ->next;
}
return false;
T.C = O( N * 2*LOG N )// traversing through LL and inserting values in map and also finding through it.
Best Approach : Tortoise and Hare approach :
slow moves by 1 and fast moves by 2.
, if slow and fast pointers ever meet , it means that there's loop .
condition to stop : move only if fast->next != NULL and fast = NULL (It can only happen if the LL is linear and has no loops)
Pseudocode :
slow = head , fast = head;
while(fast!=NULL && fast->next!=NULL){
  slow = slow->next;
  fast = fast->next->next;
     if(slow == fast) return true;
  }
return false;
code :
bool hasCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast!=NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(slow == fast) return true;
        }
        return false;
-------------------------------------------------------------------------------------------------------------------------------
Detecting the starting point of loop :
Naive approach :
Hashing , store all nodes and values the moment we find the node again , its the starting point and if not , its linear LL.
Pseudocode :
map<Node* , int> mpp
Node* temp = head;
while(temp){
   if(mpp.find(temp)) return temp;
   else (mpp[temp] = 1)
 temp = temp->next;
}
return NULL;
T.C = O(N* 2* (MAP'S COMPLEXITY)
SC = O(N)
Best Approach : Tortoise and Hare Algorithm ;
Detect a loop using the approach and after loop is detected , send one pointer to the head and
move both the pointer by 1 , the point they meet is the starting point of loop :
Pseudocode :
slow = head , fast = head;
while(fast!= NULL && fast->next!=NULL){
    slow = slow -> next;
    fast = fast ->next ->next ;
    if (slow == fast ) {
        slow = head;
        while(slow!=fast){
          slow = slow->next;
          fast = fast->next;
        }
     return slow;
    }
  } 
return NULL;
 
----------------------------------------------------------------------------------------------------------
Reversing a Linked List using recursion.
Break the problem into smaller problems , this is how recursion works,
1 -> 2 -> 3 -> 4
If LL has one node(base case) : return the node itself,
pseudocode :  
     if(head == NULL || head->next == NULL)
        return head;
If LL has two nodes:
   3->4
   reversed : X<-3<-4
   3     4 
  head  front
  front->next = head;
  head->next = NULL;
  return front;(this is the new head)
If LL has 3 nodes :
  2->3->4
  2    3      4
 head front  newhead
    call sub problem for 2 nodes :
  2-> X<-3<- 4
front->next = head ;
head -> next = NULL;
return newhead;
If LL has 4 nodes ,
1 -> X<-2<-3<-4
head front   newhead

reverse(head)
  { 
    if(head == NULL || head->next == NULL)
        return head;
   Node* newhead = reverse(head->next);
   Node* first = head->next;
   front->next = head;
   head->next = NULL;
   return newhead;
}
T.C = O(N)
S.C = O(N){recursion uses stack space}
-----------------------------------------------------------------------------------------
Finding the length of a loop :
Naive method to find it would be using hashinf , traverse through each Node and increse count ,
if we revisit the node , Subtract current count with the count we viisted it the last time and hence,
we will find the length of the loop .
PesudoCode:
map<Node, int > mpp  temp = head;
int timer = 1;
while(temp!= NULL){
   if(mpp.find(temp) == NULL){
    value = mpp[temp];
    return timer- value;
   }
   mpp[temp] = timer;
   timer++;
   temp = temp->next;
}
return 0;
}
T.C = O(N * X) x = Log N or O(1) depends on the complexity of map.
S.C = o(N)
Best Approach : Tortoise and hare algorithm:
Move slow by 1 and fast by 2 , when they collide we know that there's a loop,
now keep slow stagnant and move the fast pointer by 1 and remember the count, when it meets slow again
return the count.
pseudocode:
slow = fast = head;
while(fast!=NULL && fast->next!= NULL){
  slow = slow->next;
  fast = fast->next->next;
  if(slow == fast) return findLength(slow,fast);
}
return false; 
findLength(slow,fast){
  cnt = 1 , fast = fast->next ;
  while(slow!= fast ){
    cnt++;
    fast = fast->next;
  }
  return cnt;
}
code :
int FindLength(Node* slow , Node* fast){
    int cnt = 1 ;
    fast = fast->next;
    while(fast != slow){
        cnt++;
        fast = fast->next;
    }
    return cnt;
}
int countNodesinLoop(struct Node *head)
{
    Node* slow = head;
    Node* fast = head;
    while(fast!=NULL && fast->next != NULL){
        slow = slow->next;
        fast = fast->next->next;
        if(slow == fast){
            return FindLength(slow , fast);
        }
    }
    return 0;
}
------------------------------------------------------------------------------------------
Palindrome Linked List:
Naive Appraoch :
use a stack Data Structure , push values into stack and pop out the values.
while popping out the values check it with original Linkedlist if temp reaches NULL it is palindrome.
pseudocode :
stack st;
temp = head;
while(temp!= NULL){
  st.push(temp->data)
  temp = temp->next;
}
temp = head;
while(temp!=NULL){
 {
   if(temp->data != st.top()) return false;
   temp = temp->next;
   st.pop();
}
return true;,
TC = O(2N)
SC = O(N)
Best Approach :(NOTE : These are singly Linked Lists)
1 2 3 3 2 1  (n = even)
1 -> 2 -> 3 and reverse the later half 3 <- 2 <- 1
Find the middle of the LL using tortoise and hare algorithm,
1 2 3 4 5 6 
for this case we need to stop at middle element 1 (at index 2 )
Therefore, fast->next->next = NULL;
and now reverse the second half of Linked List ,  reverse(slow->next) and returns new head
now , 1 -> 2 -> 3 -> 3 <- 2 <- 1 , is how the LL looks,
first = head , second = newHead
if(first == second){
  first = first -> next;
  second = second -> next;
} 
in case when the n is odd and then fast->next = NULL(i.e reach the last element)
and do the same thing,
pseudocode :
slow = head , fast = head;
while(fast -> next!= NULL || fast->next->next != NULL){
  slow = slow -> next;
  fast = fast->next->next;
}
Node* newHead = reverse(slow->next);
first = head , second = newHead;
while(second!=NULL){
  if(first -> data == second -> data){
      reverse(newHead);
      return false;
    }
  first = first -> next;
  second = second->next;
 return true;
}
TC = O(2N) finding mid  O(N/2) , reverse(O(N/2)) , while(O(N/2)) , reverse(O(N/2))
SC = O(1)
-----------------------------------------------------------------------------------------------------------
Odd and even indexed nodes :
Task: Group all the even and odd indexed nodes,
1 -> 2 -> 4 -> 8 -> 5 -> 7
Groups : 1  4  5
         2  8  7
Naive approach : Do it the simple way group them and return.
T.C = O(N) 
pseudocode :
int arr[];
temp = head;
if(head == NULL || head->next = NULL) return head;
while(temp!= NULL && temp->next != NULL){
   arr.add(temp->data);
   temp = temp -> next ->next;
} //In this case if the array's size is Odd we might be skipping the last element.
if(temp) arr.add(temp->data);
//we have got the odd indexed elements. T.C = O(N/2);
temp = head -> next;
while(temp!= NULL && temp->next != NULL){
  arr.add(temp->data);
  temp = temp -> next -> next;
}                                       T.C = O(N/2)
if(temp) arr.add(temp->data);
//Now go through the index.
int i = 0 , temp = head;
while(temp!=NULL){
   temp->data = arr[i];
   i++;
   temp = temp -> next;
}                                       T.C = O(N)      
return head;
T.C = O(2N)
S.C = O(N) , we used an array.

Optimal way : 
changing the links for odd ones and the even ones.
*** 1 -> 2 -> 3 -> 4 -> 5 -> 6;
   Od   ev
Od.next = Od.next.next;
ev.next = ev.next.next;
Do this simultaneously for odd and even also observe that even will always be ahead of odd,hence check even always.
in the last node though , 5-> 6 (we didn't change this)
                         od  ev
therefore , store the first even node in any varible and then ,
evenHead = ev // at the start
odd -> next =  evenhead 
Pseudocode :
if(head == NULL || head->next == NULL) return head;
odd = head;
even = head->next;
evenHead = head->next;
while(even!=NULL && even->next != NULL ){
  odd->next =  odd->next->next;
  even->next = even->next->next;
  
  odd = odd->next;
  even = even->next;
}
odd.next = evenhead;
T.C = O(N)
S.C = O(1)
------------------------------------------------------------------------------------------------------------
Removing the nth node from the end :
1 -> 2 -> 3 -> 4 -> 5
if n = 2;
1 -> 2 -> 3-> 5
Naive Approach :
Count the number of nodes ,  and then reach the (Length - n)th node.
move temp to (Length-n)th node and store the Node to be deleted somewhere and connect temp to the next's next element,
temp->next = temp->next->next;
and free the node ;
Pseudocode :
int count = 0 ;
temp = head;
while(temp!=NULL){
  count++;   //counting the number of nodes.
  temp = temp->next;
}
if(count == N)
 newHead = head->next; // if the node to be deleted is the head of the LL.
 return newHead;
 delete head;
}
int res = count - n;
while(temp!=NULL){
  res--;
  if(res==0) break; //traversing to the node before the one to be deleted.
  temp = temp->next;
}
delNode = temp->next;
temp->next = temp->next->next;
 return head;
T.C = O(Length) + O(length-N);
S.C = O(1)

Best Approach use the tortoise and hare algorithm :
fast = head , slow = head
move the fast for n times and then start moving fast and slow simultaneously util fast reaches the end and hence the slow 
will be placed at a position before the node to be deleted.
pseudocode :
fast = head , slow = head;
for(int i = 0 -> N){
  fast = fast ->next;
}
if(fast == NULL){
  newHead = head->next;
  delete(head);
  return newHead;
}
while(fast->next != NULL){
  slow = slow->next;
  fast = fast -> next;
}
DelNode = slow -> next;
slow->next = slow->next->next;
delete(DelNode);
return head;
-------------------------------------------------------------------------------------------------------------------------------
Deleting the middle node of Linked List :
we want to end up a Node before the middle element and there we skip one slow->next iteration
pseudocode :
fast = head ;
slow = head;
fast = fast->next->next;
while(fast!=NULL && fast->next != NULL){
  slow = slow -> next;
  fast = fast->next->next;
}
DelNode = slow;
slow->next = slow->next->next;
delete(DelNode);
return head;
T.C = O(N/2)
S.C = O(1)
------------------------------------------------------------------------------------------------------
Sorting a Linked List :
Naive Solution : Pushing the values into an array ,
temp = head;
while(temp){
arr.add(temp->data);
temp = temp ->next;
}
sort(arr.begin(),arr.end());
//and the convert array into LL
while(temp){
  temp->data =  arr[i];
  i++;
  temp = temp->next;
}
return head;
T.C = O(N) + O(NLOG N) + O(N)
S.C = O(N)
Best Way : Implement Merge sort in LL itself
Merge Sort :
ms(arr,low,high){
   if(low == high)
    return;
   mid = (low+high)/2;
   ms(arr,low,high);
   ms(arr,mid+1,,high);
   merge(arr,low,mid,high);
}
f(head){  
  if(head == NULL || head->next == NULL)
   return head;
  middle = findMiddle(head);
  lefthead = head righthead = middle->next;
  middle->next = NULL;
  lefthead = ms(lefthead);
  righthead = me(righthead);
  reuturn merge(lefthead,righthead);
}
T.C = O(logN) * O(N + N/2)
S.C = O(1)
------------------------------------------------------------------------------------------------------------
 
